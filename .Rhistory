hist(40-missedCalls, main="Frequency of missed calls with Answer rate = 98%")
hist(40-missedCalls, main="Frequency of missed calls with Answer rate = 98%", xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
missedCalls <- rbinom(100,40,.99)
hist(40-missedCalls, main="Frequency of missed calls with Answer rate = 99%", xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
missedCalls <- rbinom(100,40,.9=98)
hist(40-missedCalls, main="Frequency of missed calls with Answer rate = 98%", xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
missedCalls <- rbinom(100,40,.98)
hist(40-missedCalls, main="Frequency of missed calls with Answer rate = 98%", xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
hist(40-missedCalls, main="If we answer the phone 98% of the time, this is how many calls per night we will miss",
xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
missedCalls <- rbinom(100,40,.98)
hist(40-missedCalls, main="If we answer the phone 98% of the time, this is how many calls per night we will miss",
ps=8,  xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
hist(40-missedCalls, main="If we answer the phone 98% of the time, this is how many calls per night we will miss",
cex.main=1.5,  xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
hist(40-missedCalls, main="If we answer the phone 98% of the time, this is how many calls per night we will miss",
cex.main=.8,  xlab="nightly missed calls", ylab="% of times this number of calls will be missed")
hist(40-rbinom(100,40,.9996)
)
?dbinom
dbinom(46:54, 100, .5)
library(AlgDesign)
# Full Factorial Design initiates the matrix
mat = gen.factorial(levels=c(4,4,2,2,2,4,2),
#the leves of these slots are 4,4,2... respectively
varNames=paste("V",1:7,sep=""),
factors="all")
#gen.factorial uses types, assigned in list c() format above, varNames are then given
print(mat)
head(mat)
tail(mat)
dim(mat) #1024*7
# Convert to a model matrix and generate data using expand formula
headline_1 = model.matrix(~.,data=mat) #computer interpretation of the headlines
head(headline_1)
tail(headline_1)
dim(headline_1)#1024 * 14 is 1024 different messages with the 14 levels on and off
ncol(headline_1) ## How many coefs are there?
# Some coefficients for the utility function below
cf_mm  = c(-3,-.5,.2,.3,.5,.1,-.2,.6,-1,.05,-.1,-.1,.15,.25) # a guess or not? set b1 = 0
# see optim_message_Dcrit coefficient similarities?
# Utility
u = headline_1%*%cf_mm #sum product of utliity coefs and sample headline
range(u)#all expected negative utility from clicking...
?qbeta
2+2
size <- c(.8,.9,1,1.1,1.4,1.4,1.5,1.6,1.8,2,2.4,2.5,2.7,3.2,3.5)
price <- c(70,83,74,93,89,58,85,114,95,100,138,111,124,161,172)
## least squares regression, copied from last week
house.reg <- lm(price ~ size)
# pdf("housePrices_SLR.pdf", width=6, height=4)
par(mar=c(5,4,0.1,0.1))
plot(size, price, pch=20, cex.lab=1.4)
abline(house.reg, col="green")
# dev.off()
## CAPM Example
## slide 3
mfund <- read.csv("mfunds.csv")
objects()
install.packages("netshell")
install.packages("nutshell")
)
library(nutshell)
help(nutshell)
??nutshell
x <- .GlobalEnv
while (environmentName(x) != environmentName(emptyenv())) {
print(environmentName(parent.env(x))); x <- parent.env(x)
}
sys.parent()
sys.parent(sys.parent())
sys.frame()
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
library("RSQLite")
drv<-dbDRiver("RSQLite")
drv<-dbDriver("RSQLite")
install.packages("SQLite")
drv<-dbDriver("SQLite")
con<-dbConnect(drv,dbname=system.file("extdata", "bb.db", package="nutshell"))
class(drv)
class(con)
dbGetInfo(con)
dbListTables(con)
con
install.packages("nutshell")
library(nutshell)
dbDisconnect(con)
dbUnloadDriver(drv)
install.packages("nutshell")
install.packages("nutshell")
library(nutshell)
install.packages("RSQLite")
library("RSQLite")
drv<-dbDriver("SQLite")
con<-dbConnect(drv,dbname=system.file("data", "bb.db", package="nutshell"))
class(drv)
class(con)
dbGetInfo(con)
dbListTables(con)
dbListFields(con)
dbDisconnect(con)
dbUnloadDriver(drv)
testfile<-system.file("data", "bb.db", package = "nutshell").
testfile<-system.file("data", "bb.db", package = "nutshell")
testfile
str(testfile)
install.packages("nutshell")
install.packages("nutshell")
library(nutshell)
drv<-dbDriver("SQLite")
con<-dbConnect(drv,dbname=system.file("data", "bbdb", package="nutshell"))
class(drv)
class(con)
dbListFields(con)
dbGetInfo(con)
dbListTables(con)
?bbdb
??bbdb
nutshell.bbdb
nutshell.bbdb::
nutshell.bbdb::data
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbname=system.file("data", "bb.db", package="nutshell"))
class(drv)
class(con)
dbListConnections(drv)
dbGetInfo(con)
dbListTables(con)
dbListTables(drv)
dbDisconnect(con)
dbUnloadDriver(drv)
data("batting.2008")
batting.2008.AB <- transform(batting.2008, AVG = H/AB)
batting.2008.over100AB <- subset(batting.2008.AB, subset=(AB > 100))
battingavg.2008.bins <- cut(batting.2008.over100AB$AVG,breaks=10)
table(battingavg.2008.bins)
data("batting.w.names")
install.packages("RODBC")
install.packages("RODBC")
libary(RODBC)
library(RODBC)
data("batting.2008")
tapply(X=batting.2008$HR, INDEX=list(batting.2008$teamID), FUN = sum)
?list
library(nutshell)
library("RSQLite")
drv<-dbDriver("SQLite")
con <- dbConnect("SQLite", dbname = system.file("extdata",
"bb.db", package = "nutshell.bbdb")).
con <- dbConnect("SQLite", dbname = system.file("extdata",
"bb.db", package = "nutshell.bbdb"))
con <- dbConnect(drv, dbname = system.file("extdata",
"bb.db", package = "nutshell.bbdb"))
dbGetInfo(con)
# install.packages("nutshell")
install.packages("nutshell")
install.packages("RSQLite")
install.packages("RSQLite")
library(nutshell)
library("RSQLite")
drv<-dbDriver("SQLite")
con <- dbConnect(drv, dbname = system.file("extdata",
"bb.db", package = "nutshell.bbdb"))
dbGetInfo(con)
dbListTables(con)
dbListConnections(drv)
dbListFields(con,"Allstar")
wlrecords.2008 <- dbGetQuery(con,
"SELECT teamID, W, L FROM Teams
where yearID=2008 and lgID='AL'")
wlrecords.2008
> batting.2008 <- dbGetQuery(
con, paste("SELECT m.nameLast, m.nameFirst, m.weight, m.height, ",
> batting.2008 <- dbGetQuery(con, paste("SELECT m.nameLast, m.nameFirst, m.weight, m.height, ","m.bats, m.throws, m.debut, m.birthYear, b.* ",
batting.2008 <- dbGetQuery(con, paste("SELECT m.nameLast, m.nameFirst, m.weight, m.height, ","m.bats, m.throws, m.debut, m.birthYear, b.* ",
"from Master m inner join Batting b ",
"on m.playerID=b.playerID where b.yearID=2008"))
batting.2008 <- dbGetQuery(
con, paste(
"SELECT m.nameLast, m.nameFirst, m.weight, m.height, ","m.bats, m.throws, m.debut, m.birthYear, b.* ",
"from Master m inner join Batting b ",
"on m.playerID=b.playerID where b.yearID=2008"))
names (batting.2008)
names(batting.2008)
dim(batting.2008)
batters<-dbReadTable(con,"Batting")
dim(batters)
dbDisconnect(con)
dbUnloadDriver(drv)
dbListFields(con,"Master")
drv<-dbDriver("SQLite")
con <- dbConnect(drv, dbname = system.file("extdata",
"bb.db", package = "nutshell.bbdb"))
dbListTables(con)
dbListFields(con,"Allstar")
dbListFields(con, "Master")
dbListFields(con, "Batting")
batting <- dbGetQuery(con, "SELECT * FROM Batting")
master <- dbGetQuery(con, "SELECT * FROM Master")
intersect(names(batting), names(master))
batting.w.names <- merge(batting, master)
head(batting.w.names)
get.quotes <- function(ticker,
from=(Sys.Date()-365),
to=(Sys.Date()),
interval="d") {
# define parts of the URL
base <- "http://ichart.finance.yahoo.com/table.csv?";
symbol <- paste("s=", ticker, sep="");
# months are numbered from 00 to 11, so format the month correctly
from.month <- paste("&a=",
formatC(as.integer(format(from,"%m"))-1,width=2,flag="0"),
sep="");
from.day <- paste("&b=", format(from,"%d"), sep="");
from.year <- paste("&c=", format(from,"%Y"), sep="");
to.month <- paste("&a=",
formatC(as.integer(format(to,"%m"))-1,width=2,flag="0"),
sep="");
to.day <- paste("&e=", format(to,"%d"), sep="");
to.year <- paste("&f=", format(to,"%Y"), sep="");
inter <- paste("&g=", interval, sep="");
last <- "&ignore=.csv";
# put together the URL
url <- paste(base, symbol, from.month, from.day, from.year,
to.month, to.day, to.year, inter, last, sep="");
# get the file
tmp <- read.csv(url);
# add a new column with ticker symbol labels
cbind(symbol=ticker,tmp);
}
get.multiple.quotes <- function(tkrs,
from=(Sys.Date()-365),
to=(Sys.Date()),
interval="d") {
tmp <- NULL;
for (tkr in tkrs) {
if (is.null(tmp))
tmp <- get.quotes(tkr,from,to,interval)
else tmp <- rbind(tmp,get.quotes(tkr,from,to,interval))
}
tmp
}
dow30.tickers <- c("MMM", "AA", "AXP", "T", "BAC", "BA", "CAT", "CVX", "C",
"KO", "DD", "XOM", "GE", "GM", "HPQ", "HD", "INTC", "IBM",
"JNJ", "JPM", "KFT", "MCD", "MRK", "MSFT", "PFE", "PG",
"UTX", "VZ", "WMT", "DIS")
dow30 <- get.multiple.quotes(dow30.tickers)
data(batting.2008)
batting.2008.AB <- transform(batting.2008, AVG = H/AB)
batting.20008.over100AB <- subset(batting.2009AB, subset=AB>100)
batting.20008.over100AB <- subset(batting.2008.AB, subset=AB>100)
battingavg.2008.bins<-cut(batting.2008.over100AB$AVG, breaks=10)
batting.2008.over100AB <- subset(batting.2008.AB, subset=AB>100)
battingavg.2008.bins<-cut(batting.2008.over100AB$AVG, breaks=10)
table(battingavg.2008.bins)
tapply(X=batting.2008$HR, INDEX=list(batting.2008$teamID, FUN=sum))
names(batting.2008)
tapply(X=batting.2008$HR, INDEX=list(batting.2008$teamID), FUN=sum)
tapply(X=(batting.2008$HR), index=list(batting.w.name.2008$lgID, batting.w.names.2008$bats), mean)
tapply(X=(batting.2008$HR), INDEX=list(batting.w.names.2008$lgID, batting.w.names.2008$bats), mean)
batting.w.names.2008<-batting.w.names[batting.w.names$yearid==2008,]
summary(batting.w.names.2008$yearID)
batting.w.names.2008<-batting.w.names[batting.w.names$yearID==2008,]
summary(batting.w.names.2008$yearID)
batting.w.names.2008.short<-batting.w.names[batting.w.names$yearID==2008,
c("nameFirst", "nameLast", "AB", "H", "BB")]
tapply(X=(batting.2008$HR), INDEX=list(batting.w.names.2008$lgID, batting.w.names.2008$bats), mean)
by(batting.2008[,c("H", "2B", "3B", "HR")],
INDICES = list(batting.w.names.2008$lgID, batting.w.names.2008$bats), FUN=mean)
head(batting.2008)
View(batting.w.names.2008)
View(batting.w.names.2008)
by(batting.2008[,c("H","2B","3B","HR")],
INDICES=list(batting.w.names.2008$lgID,
batting.w.names.2008$bats),FUN=mean)
aggregate(x=batting.2008[,c("AB","H","BB","2B","3B","HR")],
by=list(batting.2008$teamID),FUN=sum)
xtabs(~bats+lgID, batting.2008)
data(dow30)
summary(dow30)
install.packages("data.table")
library(data.table)
library(nutshell)
data("outcome.of.care.measures.national")
data("medicare.payments")
data("medicare.payments.by.state")
head(medicare.payments)
dim(medicare.payments)
names(medicare.payments)
medicare.payments[medicare.payments$Hospital.Name=="JOHNS HOPKINS HOSPITAL, THE", ]
temp<-sort(unique(medicare.payments$Hospital.Name))
temp2<-(medicare.payments[medicare.payments$Hospital.Name %like% "JOHNS HOPKINS",])
dim(temp2)
aggregate(temp2, by=list(Hospital.Name), FUN="sum")
if(1)
{}
if(1,TRUE, FALSE)
cat{"hey"}
cat("hey")
if(1){cat("TRUE")}
if(FALSE){cat("TRUE")}
library(doBy)
library(plyr)
library(data.table)
library(reshape)
iic<-read.csv("iiccase.csv")
iic_clean<-iic
setwd("/Users/thomaskeane/Documents/github/iic")
library(doBy)
library(plyr)
library(data.table)
library(reshape)
setwd("/Users/thomaskeane/Documents/github/iic")
iic<-read.csv("iiccase.csv")
iic_clean<-iic
iic_clean[,"Site.Name"]<-sub("-.*", "", iic_clean[,"Site.Name"])
code_data <- ddply(iic, c("Code.Description"), summarise,
N    = length(Code.Description),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
tot = sum(Gross.Coll)
)
head(code_data)
write.csv(as.data.table(code_data), "code_data.csv")
md_data <- ddply(iic, c("Doctor.Name.Variable"), summarise,
N    = length(Code.Description),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
tot = sum(Gross.Coll),
rvus = sum(RVU)
)
head(md_data)
write.csv(as.data.table(md_data), "md_data.csv")
site_data_expanded<- ddply(iic, c("Site.Name"), summarise,
N    = length(Code.Description),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
collections = sum(Gross.Coll)
)
head(site_data_expanded)
write.csv(as.data.table(site_data_expanded), "site_data_expanded.csv")
site_data_collapsed<- ddply(iic_clean, c("Site.Name", "Doctor.Name.Variable"),
summarise,
N    = length(Code.Description),
RVU  = sum(RVU),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
collections = sum(Gross.Coll)
)
head(site_data_collapsed)
write.csv(as.data.table(site_data_collapsed), "site_data_collapsed.csv")
site_data_short<-ddply(site_data_collapsed, c("Site.Name"),
summarize,
N    = length(Code.Description),
RVU  = sum(RVU),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
collections = sum(Gross.Coll)
)
head(site_data_collapsed)
names(site_data_collapsed)
warning()
site_data_short<-ddply(site_data_collapsed, c("Site.Name"),
summarize,
N    = sum(N),
RVU  = sum(RVU),
average.charge = mean(Gross.Charges),
sd.charge = sd(Gross.Charges),
average.collection = mean(Gross.Coll),
sd.collection = sd(Gross.Coll),
collections = sum(Gross.Coll)
)
names(site_data_collapsed)
View(site_data_collapsed)
site_data_short<-ddply(site_data_collapsed, c("Site.Name"),
summarize,
N    = sum(N),
RVU  = sum(RVU),
sd.charge = sd(average.charge),
average.charge = mean(average.charge),
average.collection = mean(average.collection),
sd.collection = sd(sd.collection),
collections = sum(collections)
)
View(site_data_short)
boxplot(site_data_short)
names(site_data_short)
barplot(site_data_short$collections, main="Collections by site", xlab="Site")
barplot(site_data_short$collections, main="Collections by site",
xlab="Site",names.arg = site_data_short$Site.Name)
barplot(sort(site_data_short$collections), main="Collections by site",
xlab="Site",names.arg = site_data_short$Site.Name)
site_data_short$Site.Name
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site",names.arg = site_data_short$Site.Name)
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site",names.arg = site_data_short$Site.Name,
las=1)
par(mai=c(1,2,1,1))
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site",names.arg = site_data_short$Site.Name,
las=1)
par(mai=c(1,3,1,1))
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site",names.arg = site_data_short$Site.Name,
las=1)
site_data_short$Site.Name
par(mai=c(1,3,1,1))
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site",
las=1)
sort(site_data_short$collections)
sort(site_data_short)
attach(mtcars)
ls()
mtcars
ls()
View(mtcars)
newdata<-mtcars[order(mpg), ]
View(newdata)
site_data_short<-site_data_short[order(collections),]
names(site_data_short)
site_data_short<-site_data_short[,order(collections)]
View(site_data_short)
View(mtcars)
new_data_site<-site_data_short[,order(collections)]
new_data_site<-site_data_short[order(collections),]
str(mtcars)
str(site_data_short)
new_data_site<-site_data_short[order(site_data_short$collections),]
View(new_data_site)
site_data_short<-site_data_short[order(site_data_short$collections),]
par(mai=c(1,3,1,1))
par(mai=c(1,3,1,1))
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1)
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1, cex.names = .5, cex.lab=.5)
par(mai=c(1,2,1,1))
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1, cex.names = .5, cex.lab=.5)
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1, cex.names = .5, cex.lab=.5, cex.axis = .5)
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1, cex.names = .5, cex.lab=.5, cex.axis = .75)
barplot(sort(site_data_short$collections), main="Collections by site",
horiz=TRUE, xlab="Site", names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
collections_by_site<-barplot(sort(site_data_short$collections),
main="Collections by site",
horiz=TRUE, xlab="Site",
names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
counts <- table(mtcars$vs, mtcars$gear)
View(counts)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts), beside=TRUE
)
collections_by_site
plot(collections_by_site)
collections_by_site<-barplot(sort(site_data_short$collections),
main="Collections by site",
horiz=TRUE, xlab="Site",
names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
par(mai=c(1,2.5,1,1))
collections_by_site<-barplot(sort(site_data_short$collections),
main="Collections by site",
horiz=TRUE, xlab="Site",
names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
par(mai=c(1,2,1,1))
collections_by_site<-barplot(sort(site_data_short$collections),
main="Collections by site",
horiz=TRUE, xlab="Site",
names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
rm(collections_by_site)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(doBy)
library(plyr)
library(data.table)
library(reshape)
library(ggplot2)
setwd("/Users/thomaskeane/Documents/github/iic")
head(site_data_short)
par(mai=c(1,2,1,1))
barplot(sort(site_data_short$collections),
main="Collections by site",
horiz=TRUE, xlab="Site",
names.arg =site_data_short$Site.Name,
las=1, cex.names = .65, cex.lab=.5, cex.axis = .75)
